#library "mapacs"
#include "zcommon.acs"

int SwitchesRemain;
bool FinalDoorOpen = FALSE;

bool GotYellow = FALSE;
bool GotGreen = FALSE;
bool GotBlue = FALSE;
bool GotWings = FALSE;
str Camera = "SecurityCamera";


// This array contains map names, music, and TIDs for warp points
int CurrentArea[48][3] =
{
	{"HHUSTR_E1M1", "MUS_E1M1", 664}, //0-8
	{"HHUSTR_E1M2", "MUS_E1M2", 156},
	{"HHUSTR_E1M3", "MUS_E1M3", 155},
	{"HHUSTR_E1M4", "MUS_E1M4", 154},
	{"HHUSTR_E1M5", "MUS_E1M5", 151},
	{"HHUSTR_E1M6", "MUS_E1M6", 91},
	{"HHUSTR_E1M7", "MUS_E1M7", 128},
	{"HHUSTR_E1M8", "MUS_E1M8", 165},
	{"HHUSTR_E1M9", "MUS_E1M9", 0},
	
	{"HHUSTR_E2M1", "MUS_E2M1", 138}, //9-17
	{"HHUSTR_E2M2", "MUS_E2M2", 133},
	{"HHUSTR_E2M3", "MUS_E2M3", 135},
	{"HHUSTR_E2M4", "MUS_E2M4", 140},
	{"HHUSTR_E2M5", "MUS_E1M4", 57},
	{"HHUSTR_E2M6", "MUS_E2M6", 136},
	{"HHUSTR_E2M7", "MUS_E2M7", 141},
	{"HHUSTR_E2M8", "MUS_E2M8", 95},
	{"HHUSTR_E2M9", "MUS_E2M9", 0},

	{"HHUSTR_E3M1", "MUS_E1M1", 0}, //18-26
	{"HHUSTR_E3M2", "MUS_E3M2", 0},
	{"HHUSTR_E3M3", "MUS_E3M3", 0},
	{"HHUSTR_E3M4", "MUS_E1M6", 0},
	{"HHUSTR_E3M5", "MUS_E1M3", 0},
	{"HHUSTR_E3M6", "MUS_E1M2", 0},
	{"HHUSTR_E3M7", "MUS_E1M5", 0},
	{"HHUSTR_E3M8", "MUS_E1M9", 0},
	{"HHUSTR_E3M9", "MUS_E2M6", 0},

	{"HHUSTR_E4M1", "MUS_E1M6", 0}, //27-35
	{"HHUSTR_E4M2", "MUS_E1M2", 0},
	{"HHUSTR_E4M3", "MUS_E1M3", 0},
	{"HHUSTR_E4M4", "MUS_E1M4", 0},
	{"HHUSTR_E4M5", "MUS_E1M5", 0},
	{"HHUSTR_E4M6", "MUS_E1M1", 0},
	{"HHUSTR_E4M7", "MUS_E1M7", 0},
	{"HHUSTR_E4M8", "MUS_E1M8", 0},
	{"HHUSTR_E4M9", "MUS_E1M9", 0},

	{"HHUSTR_E5M1", "MUS_E2M1", 0}, //36-44
	{"HHUSTR_E5M2", "MUS_E2M2", 0},
	{"HHUSTR_E5M3", "MUS_E2M3", 0},
	{"HHUSTR_E5M4", "MUS_E2M4", 0},
	{"HHUSTR_E5M5", "MUS_E1M4", 0},
	{"HHUSTR_E5M6", "MUS_E2M6", 0},
	{"HHUSTR_E5M7", "MUS_E2M7", 0},
	{"HHUSTR_E5M8", "MUS_E2M8", 0},
	{"HHUSTR_E5M9", "MUS_E2M9", 0},

	{"Raven's Lair", "MUS_E3M2", 0}, // 45-47
	{"The Water Shrine", "MUS_E3M3", 0},
	{"American's Legacy", "MUS_E1M6", 0}
};

script 1 (int which, int warppoint)
{
	// For when the player crosses in to a new map, don't let the script run if:
	// Line is not not activated on front and player is a bot.
	if(LineSide() == 0 && !PlayerIsBot(PlayerNumber()))
	{
		// Set the music and map name
		SetFont("BIGFONT");
		HudMessage(l:CurrentArea[which][0]; HUDMSG_FADEINOUT, 1, CR_GREEN, 0.5, 0.0, 5.0);
		LocalSetMusic(CurrentArea[which][1],0);
		if(warppoint == 1) {Teleport(0,CurrentArea[which][2],0);} // Optionally teleport
	}
}

script 2 (int deactivateMarker)
{
	// For when one of the major switches are pulled
	if(GameType() == GAME_NET_DEATHMATCH) {Terminate;} // Not in deathmatch
	
	// Display a message based on how many switches are left
	switch(SwitchesRemain)
	{
		Case 6:
		PrintBold(l:"HEREUNAB_SWITCH6");
		Break;
		
		Case 5:
		PrintBold(l:"HEREUNAB_SWITCH5");
		Break;
		
		Case 4:
		PrintBold(l:"HEREUNAB_SWITCH4");
		Break;
		
		Case 3:
		PrintBold(l:"HEREUNAB_SWITCH3");
		Break;
		
		Case 2:
		PrintBold(l:"HEREUNAB_SWITCH2");
		Break;
		
		Case 1:
		PrintBold(l:"HEREUNAB_SWITCH1");
		Break;
	}
	
	Thing_Remove(deactivateMarker); // Remove the marker
	SwitchesRemain--; // One less switch to pull
	AmbientSound("misc/puzzle",128);
	AutoSave();
}

script 3 (int action)
{
	// Check if the final door should be opened
	if(action == 0 && LineSide() == 0 && SwitchesRemain <= 0 && FinalDoorOpen == FALSE)
	{
		FinalDoorOpen = TRUE;
		Door_Open(665,8); // Open the final door
		Floor_LowerToLowest(608, 8);
		AutoSave();
		if(GameType() == GAME_NET_COOPERATIVE) // If it's a multiplayer game deliver chaos devices to the others players.
		{
			// Kill players's tag for now
			Thing_ChangeTID(1000 + PlayerNumber(), 2000 + PlayerNumber());
			AmbientSound("misc/hexflash",128);
			PrintBold(l:"CHAOSGIVING");
			for (int n1 = 0; n1 < PlayerCount(); n1++)
			GiveActorInventory(1000 + n1, "ArtiTeleport", 1);
			Delay(1);
			// Return player's tag.
			Thing_ChangeTID(2000 + PlayerNumber(), 1000 + PlayerNumber());
		}
	}
	if(Action == 1 && GotWings == FALSE)
	{
		GotWings = TRUE;
		AutoSave();
		if(GameType() == GAME_NET_COOPERATIVE)
		{
			// Kill players's tag for now
			Thing_ChangeTID(1000 + PlayerNumber(), 2000 + PlayerNumber());
			AmbientSound("misc/hexflash",128);
			PrintBold(l:"WINGSGIVING");
			for (int n2 = 0; n2 < PlayerCount(); n2++)
			GiveActorInventory(1000 + n2, "Artifly", 1);
			Delay(1);
			// Return player's tag.
			Thing_ChangeTID(2000 + PlayerNumber(), 1000 + PlayerNumber());
		}
	}
}

script 4 OPEN
{
	// Sets the cameras coordinates and the number of switches that need to be pulled based on the episode.
	if(GetLevelInfo(LEVELINFO_CLUSTERNUM) == 1)
	{
		SwitchesRemain = 5;
		Spawn(Camera, -4992.0, -7472.0, 65.0 , 9001, 64); // Docks
		SetCameraToTexture(9001, "Camera1", 90);
		Spawn(Camera, -3024.0, -9232.0, 121.0 , 9002, 160); // Dungeons
		SetCameraToTexture(9002, "Camera2", 90);
		Spawn(Camera, -3936.0, 1200.0, 113.0 , 9003, 192); // Gatehouse
		SetCameraToTexture(9003, "Camera3", 90);
		Spawn(Camera, -4224.0, -3584.0, 65.0 , 9004, 0); // Guard Tower
		SetCameraToTexture(9004, "Camera4", 90);
		Spawn(Camera, -1568.0, -1504.0, 57.0 , 9005, 64); // Citadel
		SetCameraToTexture(9005, "Camera5", 90);
		Spawn(Camera, -352.0, 4928.0, 33.0 , 9006, 192); // Cathedral
		SetCameraToTexture(9006, "Camera6", 90);
		Spawn(Camera, 3104.0, -160.0, 249.0 , 9007, 192); // Crypts
		SetCameraToTexture(9007, "Camera7", 90);
		Spawn(Camera, 6016.0, 2688.0, 297.0 , 9008, 64); // Hell's maw
		SetCameraToTexture(9008, "Camera8", 90);
		Delay(35);
		Floor_LowerToLowest(601, 8);
	}
	if(GetLevelInfo(LEVELINFO_CLUSTERNUM) == 2)
	{
		SwitchesRemain = 6;
		Spawn(Camera, 6560.0, 3328.0, 113.0 , 9001, 192); // Crater
		SetCameraToTexture(9001, "Camera1", 90);
		Spawn(Camera, 5312.0, 3520.0, 25.0 , 9002, 96); // Lava Pits
		SetCameraToTexture(9002, "Camera2", 90);
		Spawn(Camera, 1760.0, 864.0, 201.0 , 9003, 192); // River of Fire
		SetCameraToTexture(9003, "Camera3", 90);
		Spawn(Camera, -1888.0, 3360.0, 9.0 , 9004, 160); // Ice Grotto
		SetCameraToTexture(9004, "Camera4", 90);
		Spawn(Camera, -6144.0, 1184.0, 57.0 , 9005, 128); // Catacombs
		SetCameraToTexture(9005, "Camera5", 90);
		Spawn(Camera, 448.0, 9600.0, 25.0 , 9006, 160); // Labyrinth
		SetCameraToTexture(9006, "Camera6", 90);
		Spawn(Camera, 5376.0, -128.0, 345.0 , 9007, 192); // Great Hall
		SetCameraToTexture(9007, "Camera7", 90);
		Spawn(Camera, 4640.0, -5184.0, 177.0 , 9008, 192); // Portals of Chaos
		SetCameraToTexture(9008, "Camera8", 90);
		Delay(35);
		Floor_LowerToLowest(601, 8);
	}
}

script 5 ENTER
{
	// Starts the player in the docks in single player.
	if(GameType() == GAME_SINGLE_PLAYER)
	{
		Teleport_NoFog(0,0,664,0);
	}
	// Then give player a id tag.
	Thing_ChangeTID(0, 1000 + PlayerNumber());
}

script 6 RESPAWN
{
	// Enforce players in his tags.
	Thing_ChangeTID(0, 1000 + PlayerNumber());
}

script 7 OPEN // Script sets that is used when game start.
{
	if(GameType() == GAME_SINGLE_PLAYER)
		{	
		// Automatically save when the player picks up a key in singleplayer.
		if(ThingCountName("KeyYellow",0) == 0 && GotYellow == FALSE) {GotYellow = TRUE; AutoSave();}
		if(ThingCountName("KeyGreen",0) == 0 && GotGreen == FALSE) {GotGreen = TRUE; AutoSave();}
		if(ThingCountName("KeyBlue",0) == 0 && GotBlue == FALSE) {GotBlue = TRUE; AutoSave();}
		// Terminate script when all objectives is met.
		if(GotYellow == TRUE && GotGreen == TRUE && GotBlue == TRUE) {Terminate;}
		Delay(1);
		Restart;
		}
	// Open the final door in deathmatch.
	if(GameType() == GAME_NET_DEATHMATCH)
		{
		Door_Open(665,16);
		FinalDoorOpen = TRUE;
		GotWings = TRUE;
		Terminate;
		}
}

script 8 (Void) // Script set dedicated to boss areas. (Tiggered by mapinfo.txt)
{
	if(GetLevelInfo(LEVELINFO_CLUSTERNUM) == 2)
	{
	SectorDamage(94, 9000, 1000, "", DAMAGE_NONPLAYERS | DAMAGE_IN_AIR);
	SectorDamage(95, 9000, 1000, "", DAMAGE_NONPLAYERS | DAMAGE_IN_AIR);
	SectorDamage(96, 9000, 1000, "", DAMAGE_NONPLAYERS | DAMAGE_IN_AIR);
	SectorDamage(97, 9000, 1000, "", DAMAGE_NONPLAYERS | DAMAGE_IN_AIR);
	SectorDamage(98, 9000, 1000, "", DAMAGE_NONPLAYERS | DAMAGE_IN_AIR);
	SectorDamage(99, 9000, 1000, "", DAMAGE_NONPLAYERS | DAMAGE_IN_AIR);
	SectorDamage(100, 9000, 1000, "", DAMAGE_NONPLAYERS | DAMAGE_IN_AIR);
	SectorDamage(101, 9000, 1000, "", DAMAGE_NONPLAYERS | DAMAGE_IN_AIR);
	SectorDamage(102, 9000, 1000, "", DAMAGE_NONPLAYERS | DAMAGE_IN_AIR);
	SectorDamage(103, 9000, 1000, "", DAMAGE_NONPLAYERS | DAMAGE_IN_AIR);
	SectorDamage(104, 9000, 1000, "", DAMAGE_NONPLAYERS | DAMAGE_IN_AIR);
	SectorDamage(667, 9000, 1000, "", DAMAGE_NONPLAYERS | DAMAGE_IN_AIR);
	Floor_LowerToLowest(666, 8);
	Delay(35);	// If respawn is on this prevent monsters to keep diening.
	SectorDamage(94, 0, 1000, "", DAMAGE_NONPLAYERS | DAMAGE_IN_AIR);
	SectorDamage(95, 0, 1000, "", DAMAGE_NONPLAYERS | DAMAGE_IN_AIR);
	SectorDamage(96, 0, 1000, "", DAMAGE_NONPLAYERS | DAMAGE_IN_AIR);
	SectorDamage(97, 0, 1000, "", DAMAGE_NONPLAYERS | DAMAGE_IN_AIR);
	SectorDamage(98, 0, 1000, "", DAMAGE_NONPLAYERS | DAMAGE_IN_AIR);
	SectorDamage(99, 0, 1000, "", DAMAGE_NONPLAYERS | DAMAGE_IN_AIR);
	SectorDamage(100, 0, 1000, "", DAMAGE_NONPLAYERS | DAMAGE_IN_AIR);
	SectorDamage(101, 0, 1000, "", DAMAGE_NONPLAYERS | DAMAGE_IN_AIR);
	SectorDamage(102, 0, 1000, "", DAMAGE_NONPLAYERS | DAMAGE_IN_AIR);
	SectorDamage(103, 0, 1000, "", DAMAGE_NONPLAYERS | DAMAGE_IN_AIR);
	SectorDamage(104, 0, 1000, "", DAMAGE_NONPLAYERS | DAMAGE_IN_AIR);
	SectorDamage(667, 0, 1000, "", DAMAGE_NONPLAYERS | DAMAGE_IN_AIR);
	}
}