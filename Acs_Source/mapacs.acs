#library "mapacs"
#include "zcommon.acs"

int SwitchesRemain;
bool FinalDoorOpen = FALSE;

bool GotYellow = FALSE;
bool GotGreen = FALSE;
bool GotBlue = FALSE;
bool GotWings = FALSE;
str Camera = "SecurityCamera";

// Visited areas, this prevent for chaos hub action wont repeat whitout need.
// Map 1 and 9 Booleans is not needed
Bool VMap2 = FALSE;
Bool VMap3 = FALSE;
Bool VMap4 = FALSE;
Bool VMap5 = FALSE;
Bool VMap6 = FALSE;
Bool VMap7 = FALSE;
Bool VMap8 = FALSE;
Bool VMAll = FALSE;

// This array contains map names, music, TIDs for warp points and references tags for mapping.
// Tag 619 is used when the starting point is different than the warp in ExM1.
int CurrentArea[48][3] =
{
	{"HHUSTR_E1M1", "MUS_E1M1", 611}, //0-8
	{"HHUSTR_E1M2", "MUS_E1M2", 612},
	{"HHUSTR_E1M3", "MUS_E1M3", 613},
	{"HHUSTR_E1M4", "MUS_E1M4", 614},
	{"HHUSTR_E1M5", "MUS_E1M5", 615},
	{"HHUSTR_E1M6", "MUS_E1M6", 616},
	{"HHUSTR_E1M7", "MUS_E1M7", 617},
	{"HHUSTR_E1M8", "MUS_E1M8", 618},
	{"HHUSTR_E1M9", "MUS_E1M9", 0},
	
	{"HHUSTR_E2M1", "MUS_E2M1", 619}, //9-17
	{"HHUSTR_E2M2", "MUS_E2M2", 612},
	{"HHUSTR_E2M3", "MUS_E2M3", 613},
	{"HHUSTR_E2M4", "MUS_E2M4", 614},
	{"HHUSTR_E2M5", "MUS_E1M4", 615},
	{"HHUSTR_E2M6", "MUS_E2M6", 616},
	{"HHUSTR_E2M7", "MUS_E2M7", 617},
	{"HHUSTR_E2M8", "MUS_E2M8", 618},
	{"HHUSTR_E2M9", "MUS_E2M9", 0},

	{"HHUSTR_E3M1", "MUS_E1M1", 619}, //18-26
	{"HHUSTR_E3M2", "MUS_E3M2", 612},
	{"HHUSTR_E3M3", "MUS_E3M3", 613},
	{"HHUSTR_E3M4", "MUS_E1M6", 614},
	{"HHUSTR_E3M5", "MUS_E1M3", 615},
	{"HHUSTR_E3M6", "MUS_E1M2", 616},
	{"HHUSTR_E3M7", "MUS_E1M5", 617},
	{"HHUSTR_E3M8", "MUS_E1M9", 618},
	{"HHUSTR_E3M9", "MUS_E2M6", 0},

	{"HHUSTR_E4M1", "MUS_E1M6", 611}, //27-35
	{"HHUSTR_E4M2", "MUS_E1M2", 612},
	{"HHUSTR_E4M3", "MUS_E1M3", 613},
	{"HHUSTR_E4M4", "MUS_E1M4", 614},
	{"HHUSTR_E4M5", "MUS_E1M5", 615},
	{"HHUSTR_E4M6", "MUS_E1M1", 616},
	{"HHUSTR_E4M7", "MUS_E1M7", 617},
	{"HHUSTR_E4M8", "MUS_E1M8", 618},
	{"HHUSTR_E4M9", "MUS_E1M9", 0},

	{"HHUSTR_E5M1", "MUS_E2M1", 611}, //36-44
	{"HHUSTR_E5M2", "MUS_E2M2", 612},
	{"HHUSTR_E5M3", "MUS_E2M3", 613},
	{"HHUSTR_E5M4", "MUS_E2M4", 614},
	{"HHUSTR_E5M5", "MUS_E1M4", 615},
	{"HHUSTR_E5M6", "MUS_E2M6", 616},
	{"HHUSTR_E5M7", "MUS_E2M7", 617},
	{"HHUSTR_E5M8", "MUS_E2M8", 618},
	{"HHUSTR_E5M9", "MUS_E2M9", 0},

	{"Raven's Lair", "MUS_E3M2", 0}, // 45-47
	{"The Water Shrine", "MUS_E3M3", 0},
	{"American's Legacy", "MUS_E1M6", 0}
};

// Script data start.
script 1 (int which, int warppoint)	// For when the player crosses in to a new map.
{
	// Line is not activated on back side.
	if(LineSide() == 0)
	{
		// Teleport when activated from chaos room.
		if(warppoint == 1) {Teleport(0,CurrentArea[which][2],0);}
		// Open the chaos room of the visted map just once.
		if(VMAll == FALSE)
		{
			if(CurrentArea[which][2] == 612 && VMap2 == FALSE)
			{
				VMap2 = TRUE;
				Floor_LowerToLowest(CurrentArea[which][2]-10, 8);
			}
			if(CurrentArea[which][2] == 613 && VMap3 == FALSE)
			{
				VMap3 = TRUE;
				Floor_LowerToLowest(CurrentArea[which][2]-10, 8);
			}
			if(CurrentArea[which][2] == 614 && VMap4 == FALSE)
			{
				VMap4 = TRUE;
				Floor_LowerToLowest(CurrentArea[which][2]-10, 8);
			}
			if(CurrentArea[which][2] == 615 && VMap5 == FALSE)
			{
				VMap5 = TRUE;
				Floor_LowerToLowest(CurrentArea[which][2]-10, 8);
			}
			if(CurrentArea[which][2] == 616 && VMap6 == FALSE)
			{
				VMap6 = TRUE;
				Floor_LowerToLowest(CurrentArea[which][2]-10, 8);
			}
			if(CurrentArea[which][2] == 617 && VMap7 == FALSE)
			{
				VMap7 = TRUE;
				Floor_LowerToLowest(CurrentArea[which][2]-10, 8);
			}
			if(CurrentArea[which][2] == 618 && VMap8 == FALSE)
			{
				VMap8 = TRUE;
				Floor_LowerToLowest(CurrentArea[which][2]-10, 8);
			}
		}
		// Set the music and map name if player is not a bot.
		if(!PlayerIsBot(PlayerNumber()))
		{
			SetFont("BIGFONT");
			HudMessage(l:CurrentArea[which][0]; HUDMSG_FADEINOUT, 1, CR_GREEN, 0.5, 0.0, 5.0);
			LocalSetMusic(CurrentArea[which][1],0);
		}
	}
}

script 2 (int deactivateMarker)
{
	// For when one of the major switches are pulled
	if(GameType() == GAME_NET_DEATHMATCH) {Terminate;} // Not in deathmatch
	
	// Display a message based on how many switches are left
	switch(SwitchesRemain)
	{
		Case 7:
		PrintBold(l:"HEREUNAB_SWITCH7");
		Break;
		
		Case 6:
		PrintBold(l:"HEREUNAB_SWITCH6");
		Break;
		
		Case 5:
		PrintBold(l:"HEREUNAB_SWITCH5");
		Break;
		
		Case 4:
		PrintBold(l:"HEREUNAB_SWITCH4");
		Break;
		
		Case 3:
		PrintBold(l:"HEREUNAB_SWITCH3");
		Break;
		
		Case 2:
		PrintBold(l:"HEREUNAB_SWITCH2");
		Break;
		
		Case 1:
		PrintBold(l:"HEREUNAB_SWITCH1");
		Break;
	}
	
	Thing_Remove(deactivateMarker); // Remove the marker
	SwitchesRemain--; // One less switch to pull
	AmbientSound("misc/puzzle",128);
	AutoSave();
}

script 3 (int action)
{
	// Action 0 - Check if the final door should be opened
	if(action == 0 && LineSide() == 0 && SwitchesRemain <= 0 && FinalDoorOpen == FALSE)
	{
		FinalDoorOpen = TRUE;
		Door_Open(665,8); // Open the final door
		Floor_LowerToLowest(608, 8);
		if(GameType() == GAME_NET_COOPERATIVE) // If it's a multiplayer game deliver chaos devices to the others players.
		{
			// Kill players's tag for now
			Thing_ChangeTID(1000 + PlayerNumber(), 2000 + PlayerNumber());
			AmbientSound("misc/hexflash",128);
			PrintBold(l:"CHAOSGIVING");
			for (int n1 = 0; n1 < PlayerCount(); n1++)
			GiveActorInventory(1000 + n1, "ArtiTeleport", 1);
			Delay(1);
			// Return player's tag.
			Thing_ChangeTID(2000 + PlayerNumber(), 1000 + PlayerNumber());
		}
	}
	// Action 1 - Someone has collected the Wings.
	if(Action == 1 && GotWings == FALSE)
	{
		GotWings = TRUE;
		AutoSave();
		if(GameType() == GAME_NET_COOPERATIVE)
		{
			// Kill players's tag for now
			Thing_ChangeTID(1000 + PlayerNumber(), 2000 + PlayerNumber());
			AmbientSound("misc/hexflash",128);
			PrintBold(l:"WINGSGIVING");
			for (int n2 = 0; n2 < PlayerCount(); n2++)
			GiveActorInventory(1000 + n2, "Artifly", 1);
			Delay(1);
			// Return player's tag.
			Thing_ChangeTID(2000 + PlayerNumber(), 1000 + PlayerNumber());
		}
	}
	// Both Actions 2 - Display a tip based on where the secret transition is but not on deathmatch.
	if(Action == 2 && GameType() != GAME_NET_DEATHMATCH)
	{
		if(GetLevelInfo(LEVELINFO_CLUSTERNUM) == 1) {Door_Open(150,16); PrintBold(l:"HEREUNAB_SECRET1");}
		if(GetLevelInfo(LEVELINFO_CLUSTERNUM) == 2) {Terminate;}
		if(GetLevelInfo(LEVELINFO_CLUSTERNUM) == 3) {Door_Open(158,16); PrintBold(l:"HEREUNAB_SECRET3");}
		AmbientSound("misc/puzzle",128);
		AutoSave();
	}
	if(Action == 2 && GameType() == GAME_NET_DEATHMATCH)
	{
		if(GetLevelInfo(LEVELINFO_CLUSTERNUM) == 1) {Door_Open(150,16);}
		if(GetLevelInfo(LEVELINFO_CLUSTERNUM) == 2) {Terminate;}
		if(GetLevelInfo(LEVELINFO_CLUSTERNUM) == 3) {Door_Open(158,16);}
	}
}

script 4 OPEN
{
	// Sets the cameras coordinates and the number of switches that need to be pulled based on the episode.
	// Note for future changes, player sight height is 41 units plus floor height.
	if(GetLevelInfo(LEVELINFO_CLUSTERNUM) == 1)
	{
		SwitchesRemain = 5;
		Spawn(Camera, -4992.0, -7472.0, 65.0 , 9001, 64); // Docks
		SetCameraToTexture(9001, "Camera1", 90);
		Spawn(Camera, -3024.0, -9232.0, 121.0 , 9002, 160); // Dungeons
		SetCameraToTexture(9002, "Camera2", 90);
		Spawn(Camera, -3936.0, 1200.0, 113.0 , 9003, 192); // Gatehouse
		SetCameraToTexture(9003, "Camera3", 90);
		Spawn(Camera, -4224.0, -3584.0, 65.0 , 9004, 0); // Guard Tower
		SetCameraToTexture(9004, "Camera4", 90);
		Spawn(Camera, -1568.0, -1504.0, 57.0 , 9005, 64); // Citadel
		SetCameraToTexture(9005, "Camera5", 90);
		Spawn(Camera, -352.0, 4928.0, 33.0 , 9006, 192); // Cathedral
		SetCameraToTexture(9006, "Camera6", 90);
		Spawn(Camera, 3104.0, -160.0, 249.0 , 9007, 192); // Crypts
		SetCameraToTexture(9007, "Camera7", 90);
		Spawn(Camera, 6016.0, 2688.0, 297.0 , 9008, 64); // Hell's maw
		SetCameraToTexture(9008, "Camera8", 90);
		Delay(35);
		Floor_LowerToLowest(601, 8);
	}
	if(GetLevelInfo(LEVELINFO_CLUSTERNUM) == 2)
	{
		SwitchesRemain = 6;
		Spawn(Camera, 6560.0, 3328.0, 113.0 , 9001, 192); // Crater
		SetCameraToTexture(9001, "Camera1", 90);
		Spawn(Camera, 5312.0, 3520.0, 25.0 , 9002, 96); // Lava Pits
		SetCameraToTexture(9002, "Camera2", 90);
		Spawn(Camera, 1760.0, 864.0, 201.0 , 9003, 192); // River of Fire
		SetCameraToTexture(9003, "Camera3", 90);
		Spawn(Camera, -1888.0, 3360.0, 9.0 , 9004, 160); // Ice Grotto
		SetCameraToTexture(9004, "Camera4", 90);
		Spawn(Camera, -6144.0, 1184.0, 57.0 , 9005, 128); // Catacombs
		SetCameraToTexture(9005, "Camera5", 90);
		Spawn(Camera, 360.0, 9560.0, 49.0 , 9006, 160); // Labyrinth
		SetCameraToTexture(9006, "Camera6", 90);
		Spawn(Camera, 5376.0, -128.0, 345.0 , 9007, 192); // Great Hall
		SetCameraToTexture(9007, "Camera7", 90);
		Spawn(Camera, 4640.0, -5184.0, 177.0 , 9008, 192); // Portals of Chaos
		SetCameraToTexture(9008, "Camera8", 90);
		Delay(35);
		Floor_LowerToLowest(601, 8);
	}
	if(GetLevelInfo(LEVELINFO_CLUSTERNUM) == 3)
	{
		SwitchesRemain = 7;
		Spawn(Camera, -2816.0, -2880.0, 105.0 , 9001, 0); // Storehouse
		SetCameraToTexture(9001, "Camera1", 90);
		Spawn(Camera, 704.0, -6960.0, 161.0 , 9002, 64); // Cesspool
		SetCameraToTexture(9002, "Camera2", 90);
		Spawn(Camera, -912.0, -1632.0, 297.0 , 9003, 64); // Confluence
		SetCameraToTexture(9003, "Camera3", 90);
		Spawn(Camera, 2976.0, -192.0, 33.0 , 9004, 192); // Azure Fortress
		SetCameraToTexture(9004, "Camera4", 90);
		Spawn(Camera, 1376.0, 3840.0, 65.0 , 9005, 64); // Ophidian Lair
		SetCameraToTexture(9005, "Camera5", 90);
		Spawn(Camera, -992.0, 5096.0, 89.0 , 9006, 64); // Halls of Fear
		SetCameraToTexture(9006, "Camera6", 90);
		Spawn(Camera, 5992.0, 3672.0, -143.0 , 9007, 64); // Chasm
		SetCameraToTexture(9007, "Camera7", 90);
		Spawn(Camera, 9504.0, 4384.0, 177.0 , 9008, 64); // D'Sparil's Keep
		SetCameraToTexture(9008, "Camera8", 90);
		Delay(35);
		Floor_LowerToLowest(601, 8);
	}
}

script 5 ENTER
{
	// Starts the player in the starting map point in single player.
	if(GameType() == GAME_SINGLE_PLAYER)
	{
		Teleport_NoFog(0,0,611,0);
	}
	// Then give player a id tag.
	Thing_ChangeTID(0, 1000 + PlayerNumber());
}

script 6 RESPAWN
{
	// Enforce players in his tags.
	Thing_ChangeTID(0, 1000 + PlayerNumber());
}

script 7 OPEN // Loop script sets that is used when game start.
{
	if(GameType() == GAME_SINGLE_PLAYER)
		{	
		// Automatically save when the player picks up a key in singleplayer.
		if(ThingCountName("KeyYellow",0) == 0 && GotYellow == FALSE) {GotYellow = TRUE; AutoSave();}
		if(ThingCountName("KeyGreen",0) == 0 && GotGreen == FALSE) {GotGreen = TRUE; AutoSave();}
		if(ThingCountName("KeyBlue",0) == 0 && GotBlue == FALSE) {GotBlue = TRUE; AutoSave();}
		if(VMap2 == TRUE && VMap3 == TRUE && VMap4 == TRUE && VMap5 == TRUE && VMap6 == TRUE && VMap7 == TRUE && VMap8 == TRUE)
		{VMAll = TRUE; AutoSave();}
		// Terminate script when all objectives is met.
		if(GotYellow == TRUE && GotGreen == TRUE && GotBlue == TRUE && VMAll == TRUE) {Terminate;}
		Delay(1);
		Restart;
		}
	// Open the final door in deathmatch.
	if(GameType() == GAME_NET_DEATHMATCH)
		{
		Door_Open(665,16);
		FinalDoorOpen = TRUE;
		GotWings = TRUE;
		Terminate;
		}
}

script 8 (Void) // Script set dedicated to boss areas. (Tiggered by mapinfo.txt)
{
	if(GetLevelInfo(LEVELINFO_CLUSTERNUM) == 2)
	{
	SectorDamage(94, 9000, 1000, "", DAMAGE_NONPLAYERS | DAMAGE_IN_AIR);
	SectorDamage(618, 9000, 1000, "", DAMAGE_NONPLAYERS | DAMAGE_IN_AIR);
	SectorDamage(96, 9000, 1000, "", DAMAGE_NONPLAYERS | DAMAGE_IN_AIR);
	SectorDamage(97, 9000, 1000, "", DAMAGE_NONPLAYERS | DAMAGE_IN_AIR);
	SectorDamage(98, 9000, 1000, "", DAMAGE_NONPLAYERS | DAMAGE_IN_AIR);
	SectorDamage(99, 9000, 1000, "", DAMAGE_NONPLAYERS | DAMAGE_IN_AIR);
	SectorDamage(100, 9000, 1000, "", DAMAGE_NONPLAYERS | DAMAGE_IN_AIR);
	SectorDamage(101, 9000, 1000, "", DAMAGE_NONPLAYERS | DAMAGE_IN_AIR);
	SectorDamage(102, 9000, 1000, "", DAMAGE_NONPLAYERS | DAMAGE_IN_AIR);
	SectorDamage(103, 9000, 1000, "", DAMAGE_NONPLAYERS | DAMAGE_IN_AIR);
	SectorDamage(104, 9000, 1000, "", DAMAGE_NONPLAYERS | DAMAGE_IN_AIR);
	SectorDamage(667, 9000, 1000, "", DAMAGE_NONPLAYERS | DAMAGE_IN_AIR);
	Floor_LowerToLowest(666, 8);
	Delay(1);	// If respawn is on this prevent monsters to keep diening.
	SectorDamage(94, 0, 1000, "", DAMAGE_NONPLAYERS | DAMAGE_IN_AIR);
	SectorDamage(618, 0, 1000, "", DAMAGE_NONPLAYERS | DAMAGE_IN_AIR);
	SectorDamage(96, 0, 1000, "", DAMAGE_NONPLAYERS | DAMAGE_IN_AIR);
	SectorDamage(97, 0, 1000, "", DAMAGE_NONPLAYERS | DAMAGE_IN_AIR);
	SectorDamage(98, 0, 1000, "", DAMAGE_NONPLAYERS | DAMAGE_IN_AIR);
	SectorDamage(99, 0, 1000, "", DAMAGE_NONPLAYERS | DAMAGE_IN_AIR);
	SectorDamage(100, 0, 1000, "", DAMAGE_NONPLAYERS | DAMAGE_IN_AIR);
	SectorDamage(101, 0, 1000, "", DAMAGE_NONPLAYERS | DAMAGE_IN_AIR);
	SectorDamage(102, 0, 1000, "", DAMAGE_NONPLAYERS | DAMAGE_IN_AIR);
	SectorDamage(103, 0, 1000, "", DAMAGE_NONPLAYERS | DAMAGE_IN_AIR);
	SectorDamage(104, 0, 1000, "", DAMAGE_NONPLAYERS | DAMAGE_IN_AIR);
	SectorDamage(667, 0, 1000, "", DAMAGE_NONPLAYERS | DAMAGE_IN_AIR);
	}
	if(GetLevelInfo(LEVELINFO_CLUSTERNUM) == 3)
	SectorDamage(130, 9000, 1000, "", DAMAGE_NONPLAYERS | DAMAGE_IN_AIR);
	SectorDamage(131, 9000, 1000, "", DAMAGE_NONPLAYERS | DAMAGE_IN_AIR);
	SectorDamage(132, 9000, 1000, "", DAMAGE_NONPLAYERS | DAMAGE_IN_AIR);
	SectorDamage(133, 9000, 1000, "", DAMAGE_NONPLAYERS | DAMAGE_IN_AIR);
	SectorDamage(134, 9000, 1000, "", DAMAGE_NONPLAYERS | DAMAGE_IN_AIR);
	SectorDamage(135, 9000, 1000, "", DAMAGE_NONPLAYERS | DAMAGE_IN_AIR);
	SectorDamage(136, 9000, 1000, "", DAMAGE_NONPLAYERS | DAMAGE_IN_AIR);
	SectorDamage(137, 9000, 1000, "", DAMAGE_NONPLAYERS | DAMAGE_IN_AIR);
	SectorDamage(138, 9000, 1000, "", DAMAGE_NONPLAYERS | DAMAGE_IN_AIR);
	SectorDamage(139, 9000, 1000, "", DAMAGE_NONPLAYERS | DAMAGE_IN_AIR);
	SectorDamage(140, 9000, 1000, "", DAMAGE_NONPLAYERS | DAMAGE_IN_AIR);
	SectorDamage(142, 9000, 1000, "", DAMAGE_NONPLAYERS | DAMAGE_IN_AIR);
	SectorDamage(143, 9000, 1000, "", DAMAGE_NONPLAYERS | DAMAGE_IN_AIR);
	SectorDamage(144, 9000, 1000, "", DAMAGE_NONPLAYERS | DAMAGE_IN_AIR);
	SectorDamage(618, 9000, 1000, "", DAMAGE_NONPLAYERS | DAMAGE_IN_AIR);
	SectorDamage(666, 9000, 1000, "", DAMAGE_NONPLAYERS | DAMAGE_IN_AIR);
	SectorDamage(900, 9000, 1000, "", DAMAGE_NONPLAYERS | DAMAGE_IN_AIR);
	Floor_LowerToLowest(666, 8);
	Delay(1);	// If respawn is on this prevent monsters to keep diening.
	SectorDamage(130, 0, 1000, "", DAMAGE_NONPLAYERS | DAMAGE_IN_AIR);
	SectorDamage(131, 0, 1000, "", DAMAGE_NONPLAYERS | DAMAGE_IN_AIR);
	SectorDamage(132, 0, 1000, "", DAMAGE_NONPLAYERS | DAMAGE_IN_AIR);
	SectorDamage(133, 0, 1000, "", DAMAGE_NONPLAYERS | DAMAGE_IN_AIR);
	SectorDamage(134, 0, 1000, "", DAMAGE_NONPLAYERS | DAMAGE_IN_AIR);
	SectorDamage(135, 0, 1000, "", DAMAGE_NONPLAYERS | DAMAGE_IN_AIR);
	SectorDamage(136, 0, 1000, "", DAMAGE_NONPLAYERS | DAMAGE_IN_AIR);
	SectorDamage(137, 0, 1000, "", DAMAGE_NONPLAYERS | DAMAGE_IN_AIR);
	SectorDamage(138, 0, 1000, "", DAMAGE_NONPLAYERS | DAMAGE_IN_AIR);
	SectorDamage(139, 0, 1000, "", DAMAGE_NONPLAYERS | DAMAGE_IN_AIR);
	SectorDamage(140, 0, 1000, "", DAMAGE_NONPLAYERS | DAMAGE_IN_AIR);
	SectorDamage(142, 0, 1000, "", DAMAGE_NONPLAYERS | DAMAGE_IN_AIR);
	SectorDamage(143, 0, 1000, "", DAMAGE_NONPLAYERS | DAMAGE_IN_AIR);
	SectorDamage(144, 0, 1000, "", DAMAGE_NONPLAYERS | DAMAGE_IN_AIR);
	SectorDamage(618, 0, 1000, "", DAMAGE_NONPLAYERS | DAMAGE_IN_AIR);
	SectorDamage(666, 0, 1000, "", DAMAGE_NONPLAYERS | DAMAGE_IN_AIR);
	SectorDamage(900, 0, 1000, "", DAMAGE_NONPLAYERS | DAMAGE_IN_AIR);
}

script 9 (Void) // Debug script
{
	SwitchesRemain = 0;
	VMAll = True;
	Acs_Execute(3, 0, 0);
	Floor_LowerToLowest(602, 8);
	Floor_LowerToLowest(603, 8);
	Floor_LowerToLowest(604, 8);
	Floor_LowerToLowest(605, 8);
	Floor_LowerToLowest(606, 8);
	Floor_LowerToLowest(607, 8);
	Floor_LowerToLowest(608, 8);
}